************************************
****** SERVIDOR HTTP CON NODE ******
************************************
const http = require('node:http')

const server = http.createServer((req, res) => {
	console.log('request received:', req.url)
	res.end('Hola mundo')

})

//escuchar el servidor
//si coloco el cero y eso de abajo, siempre que lo ejecute me va a dar un puerto que este libre
server.listen(, () => {
	console.log(`server listening on port http://localhost:${server.address().port}`)
})

**tener cuidado si el puerto en el q estoy intentando ya esta en uso***




************************************
******* REQUESTS Y RESPONSES *******
************************************
Request:
	- url
	- headers: info que va pegada a la peticion para "dar mas contexto"
	- method
	- body: datos que queremos transmitir

Response:
	- statusCode
	- body
	- headers



*****************************
**********StatusCode*********
*****************************
100-199: Respuestas informativas
200-299: Respuestas satisfactorias
300-399: Redirecciones
400-499: Errores del cliente (algo que haces del lado del cliente)
500-599: Errores del servidor (algo que se hace del lado del servidor)
(ver pag http.cat)
Ej: 
	200 ok
	400 bad request
	404 Not found
	500 Internal Server Error



****************************
********DEPENDENCIAS********
****************************
dependencias: 
	- nodemon --> para ver cambios en tiempo real


********************************
*******BUSCAR E INVESTIGAR******
********************************
ver extensiones:
	- REST cliente
	- RapidAPI CLient
	- Thunder client
Regex & Path-to-regex





**********
node --watch ./app.js --> para levantar la app  





**************************
*********REST API*********
**************************
REST->(arq)

*Recursos:
	- cada recurso se identifica con una url
*Verbos/Metodos HTTP:
	- para definir las operaciones que se pueden realizar con los Recursos (operaciones basicas de un CRUD)
*Representaciones:
	- JSON
	- XML
	- HTML
	- etc
* Stateless:
	- el cliente debe enviar toda la informacion necesaria para procesar la request
* Interfaz uniforme
* Separacion de conceptos
	- permite que el cliente y el servidor evolucionen de forma separada
* Tiene que poder pasarsele de todo pero que devuelva segun lo necesario (tienen que ser robustas, procesar lo que se necesita y no ser exquisitas)




****
mirar la documentacion de la libreria zod (ver lo que se le puede poner al atributo)



****
Diferencias entre POST PUT y PATCH
****
Idempotencia: propiedad de realizar una accion determinada varias veces y aun asi conseguir siempre el msmo resultado que se obtendria al hacerlo una vez

POST:
	- proposito: crear un nuevo elemento/recurso en el servidor
	- /movies
	- NO es idempotente porque siempre se crea un nuevo recurso
PUT:
	- proposito: actualizar totalmente un elemento ya existente o crearlo si no existe
	- /movies/:id
	- SI es idempotente, porque por mas veces que hagamos la misma solicitud, el resultado siempre sera el mismo
PATCH:
	- proposito: actualizar parcialmente un elemento o recurso
	- /movies/:id
	- En principio si es idempotente, pero depende (tambien podria pasar en el PUT pero no es tan comun)


